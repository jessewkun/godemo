name: Cron Release Environment CI/CD

on:
    release:
        types: [published]
    workflow_dispatch:
        inputs:
            environment:
                description: "deploy environment"
                required: true
                default: "release"
                type: choice
                options:
                    - release

env:
    GO_VERSION: "1.23.10"
    DEPLOY_ENV: "release"

permissions:
    contents: read
    packages: read

jobs:
    build-and-deploy-cron-release:
        name: build and deploy cron to release environment
        runs-on: ubuntu-latest
        steps:
            - name: checkout code
              uses: actions/checkout@v3
              with:
                  token: ${{ secrets.PAT_TOKEN }}

            - name: setup go environment
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: configure git access to private repository
              run: |
                  git config --global url."https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/".insteadOf "https://github.com/"

            - name: configure go private module
              run: |
                  go env -w GOPROXY=https://goproxy.io,direct

            - name: download dependencies
              run: |
                  go install github.com/google/wire/cmd/wire@latest
                  go mod download

            - name: build cron application
              run: |
                  echo "ÂΩìÂâçÈÉ®ÁΩ≤ÁéØÂ¢É: ${{ env.DEPLOY_ENV }}"
                  make build-cron
                  chmod +x bin/godemo-cron

            - name: transfer deployment package to release server
              uses: appleboy/scp-action@v0.1.6
              with:
                  host: ${{ secrets.REMOTE_HOST }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: ${{ secrets.REMOTE_PORT }}
                  source: "bin/godemo-cron,config,Makefile,go.mod,go.sum,scripts/deploy.sh,resources"
                  target: "/root/godemo-cron"

            - name: deploy cron to release environment
              uses: appleboy/ssh-action@v1.0.0
              with:
                  host: ${{ secrets.REMOTE_HOST }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: ${{ secrets.REMOTE_PORT }}
                  script: |
                      echo "=== cron release environment deployment start ==="
                      cd /root/godemo-cron
                      echo "current directory: $(pwd)"
                      echo "directory content:"
                      ls -la
                      echo "check cron binary:"
                      if [ -f "bin/godemo-cron" ]; then
                          echo "‚úÖ godemo-cron binary exists"
                          ls -la bin/godemo-cron
                          chmod +x bin/godemo-cron
                      else
                          echo "‚ùå godemo-cron binary does not exist"
                          exit 1
                      fi
                      echo "check deployment script:"
                      if [ -f "scripts/deploy.sh" ]; then
                          echo "‚úÖ deploy.sh file exists"
                          ls -la scripts/deploy.sh
                          echo "set execution permission..."
                          chmod +x scripts/deploy.sh
                          echo "execute cron deployment script [environment: ${{ env.DEPLOY_ENV }}]..."
                          ./scripts/deploy.sh ${{ env.DEPLOY_ENV }} cron
                      else
                          echo "‚ùå deploy.sh file does not exist"
                          echo "current directory file:"
                          ls -la
                          exit 1
                      fi

            - name: send feishu notification
              run: |
                RELEASE_TAG=${{ toJson(github.event.release.tag_name) }}
                RELEASE_TITLE=${{ toJson(github.event.release.name) }}
                RELEASE_BODY=${{ toJson(github.event.release.body) }}
                ACTOR=${{ toJson(github.actor) }}
                RELEASE_URL=${{ toJson(github.event.release.html_url) }}

                PAYLOAD=$(cat <<EOF
                {
                  "msg_type": "post",
                  "content": {
                    "post": {
                      "zh_cn": {
                        "title": "‚è∞ „ÄêÂêéÁ´ØCron„ÄëÁîü‰∫ßÁéØÂ¢É‰∏äÁ∫øÈÄöÁü•",
                        "content": [[
                          { "tag": "text", "text": "üè∑Ô∏è ÁâàÊú¨Ê†áÁ≠æÔºö$RELEASE_TAG\n" },
                          { "tag": "text", "text": "üìù ÁâàÊú¨Ê†áÈ¢òÔºö$RELEASE_TITLE\n" },
                          { "tag": "text", "text": "üôã ÂèëÂ∏É‰∫∫Ôºö$ACTOR\n" },
                          { "tag": "text", "text": "üîó Release ÈìæÊé•Ôºö$RELEASE_URL\n" },
                          { "tag": "text", "text": "üìã ÂèëÂ∏ÉËØ¥ÊòéÔºö\n$RELEASE_BODY\n" }
                        ]]
                      }
                    }
                  }
                }
                EOF
                )
                curl -s -X POST "$FEISHU_WEBHOOK" \
                -H "Content-Type: application/json" \
                -d "$PAYLOAD"
              env:
                FEISHU_WEBHOOK: ${{ secrets.FEISHU_DEPLOY_ONLINE_WEBHOOK }}
